#!/bin/bash
##WRITTEN BY: KOEN VAN DER KRUK
##VERSION 1

LOCATION_OF_SCRIPT=`readlink -f "$0"`

CONFIG_FILE_NAME="/etc/mcloud-config/mcloud-server.conf"

CONFIG_CONTENTS=`cat $CONFIG_FILE_NAME`

if [ ! -f $CONFIG_FILE_NAME ]; then #checking config file
			echo "ERROR: MCLOUD_CONFIG_SERVER file does not exists, please run setup first."
			exit 1;
fi

eval $CONFIG_CONTENTS


addUser() {

	echo "Add user to central peer using SSH-KEY PAIR"
	echo "Please make sure you changed the ssh config file to only allow ssh-key pair login"

	if [ -z "$HOME_DIRECTORY" ]; then

		echo "Specify the location to all the home directories of the user"
		read HOME_LOCATION #reading home location for the users.
	else
		HOME_LOCATION="$HOME_DIRECTORY"

	fi

	echo "Make sure the public key file is generated by ssh-keygen"
	echo "Specify public key file location of user"
	read PUB_FILE #asking for public RSA key file.

	CONTENTS_OF_KEY=`cat $PUB_FILE`

	echo "This will be the username to login with"
	USER_NAME=`ssh-keygen -l -f $PUB_FILE | cut -f4 -d' ' | cut -f1 -d'@'` #checking for validity for the keyfile.
	echo $USER_NAME

	echo "Correct? (y/n)"
	read COR
	if [[ $COR == *"n"* ]]
	then
		echo "Specify another username: "
		read USER_NAME
	fi

	USER_HOME=$HOME_LOCATION/$USER_NAME
	echo "Home directory will be: $USER_HOME"

	echo "Adding user to central peer"

	sudo useradd -s /bin/bash -m -d $USER_HOME -c "PEER USER" -g users $USER_NAME #adding username to central server including the home directory.

	sudo mkdir -p $USER_HOME/.ssh #creating the .ssh directory inside the home directory.
	sudo sh -c "echo \" \" >> $USER_HOME/.ssh/authorized_keys"
	echo "Copying pub key file to location..."

	sudo sh -c "echo $CONTENTS_OF_KEY >> $USER_HOME/.ssh/authorized_keys" #copying the contents of the rsa key file inside the home location of the user.

	echo "Applying rights"
	sudo setfacl -m u:$USER_NAME:rwx $USER_HOME #apply ACL rights.
	sudo setfacl -m other:--- $USER_HOME #make sure no one else can access the directory (root ofc can)

	echo "Adding user to NFS share"
	sudo sh -c "echo \"$USER_HOME  localhost(insecure,rw,sync,no_subtree_check) \" >> /etc/exports " #adding the home directory as NFS export.
	echo "Exporting /etc/exports file"

	sudo /etc/init.d/nfs-kernel-server start #restarting the NFS server.
	sudo exportfs -a #exporting the newly created exports file.

	echo "SSH server restarting"
	/etc/init.d/ssh restart #restart SSH server.
}

removeUser() {
	echo "This will remove the user from the central server and also delete the home directory. After this the user can no longer access this central server."

	echo "What user do you want to remove, specify username? (e.g. kip)"
	read USER_DELETE

	USER_HOME=`eval echo ~$USER_DELETE` #getting home directory for the user.
	echo "Is the home directory?: $USER_HOME"
	sudo userdel $USER_DELETE --remove #removing the user, inculuding the home directory.

	echo "SSH server restarting"
	/etc/init.d/ssh restart #restarting SSH

	echo "====NOTE==== You have to remove the user from the exports file: /etc/exports. To make sure there is no more NFS access." #make sure to apply this step.
}

#########################
# OPENING MCLOUD IMAGE  #
#########################
openEncryptedContainer() {

	echo "Opening and mounting the already created mCloud instance.."

	echo "Opening the image file: $IMAGE_FILE..."
	sudo cryptsetup luksOpen $IMAGE_FILE $LOCAL_FILE_CONTAINER --key-file $KEY_FILE #opening the encrypted container with a keyfile specified at the location of origin.
	echo "Mounting encrypted container..."
	sudo mount -o acl /dev/mapper/$LOCAL_FILE_CONTAINER $LOCATION_MOUNTPOINT #mount the container with ACL permissions.
	echo "Mountpoint is attached"
}


#########################
# CLOSING MCLOUD IMAGE  #
#########################
closeEncryptedContainer() {
	echo "Closing the already mounted mCloud image."

	echo "Umounting mountpoint: $LOCATION_MOUNTPOINT"
	sudo umount $LOCATION_MOUNTPOINT #umounting the encrypted container.
	echo "Closing encrypted luksvolume"
	sudo cryptsetup luksClose $LOCAL_FILE_CONTAINER #closing the mapper field for the container.
	echo "Mountpoint is closed"
}


#########################
# The command line help #
#########################
display_help() {
    echo "This will run a few scripts for mCloud and this script will also ask some information before installing every component"
    echo ""
    echo "Usage: $0 [option...] { addUser | removeUser | openEncryptedContainer | closeEncryptedContainer }" >&2
    echo ""
    echo "   -c, --configuration           (TODO) Path to configuration file, default file is: /etc/mcloud-config/mcloud-server.conf"
    echo "   -h, --help                    Display this help message"
    echo ""
    exit 1
}

################################
# Check if parameters options  #
# are given on the commandline #
################################
while :
do
    case "$1" in
      -c | --configuration)
 	  			echo "Adding config file" #let the user specifiy an external config file. TODO.
	  			shift 2
          ;;
      -h | --help)
          display_help  # Call your function
          exit 0
          ;;
      --) # End of all options
          shift 2
          break
          ;;
      -*)
          echo "Error: Unknown option: $1" >&2
          ## or call function display_help
          exit 1
          ;;
      *)  # No more options
          break
          ;;
    esac
done

######################
# Check if parameter #
# is set too execute #
######################
case "$1" in
  addUser)
    addUser #added
    ;;
  removeUser)
    removeUser
    ;;
  openEncryptedContainer)
    openEncryptedContainer ##added
    ;;
  closeEncryptedContainer)
    closeEncryptedContainer  ##added
    ;;
  *)


     display_help
     exit 1
    ;;
esac

echo "Finishing"

#!/bin/bash
##WRITTEN BY: KOEN VAN DER KRUK
##VERSION 1
##CLIENT PEER SCRIPT
LOCATION_OF_SCRIPT=`readlink -f "$0"`


USER=`whoami` #getting user name
CONFIG_FILE_NAME="/etc/mcloud-config/mcloud-client.conf" #getting client configuration.

CONFIG_CONTENTS=`cat $CONFIG_FILE_NAME`

if [ ! -f $CONFIG_FILE_NAME ]; then #checking if file exists before running.
		echo "ERROR: MCLOUD_CONFIG_SERVER file does not exists, please run setup first."
		exit 1;
fi
eval $CONFIG_CONTENTS #Yes I know, not secure. But will do for the time being.

disconnectClientServer() { #function to disconnect client and server
	echo "Unmounting SSH mountpoint and tunnel"
	sudo umount $LOCATION_SSHFS_MOUNTPOINT #umounting the sshfs mountpoint.
	sudo killall ssh
}

connectClientServer() {

	echo "Calling mCloud server and creating tunnel"

	ssh -fNv -L 3049:localhost:2049 $USER@$CENTRAL_IP -o IdentityFile=$USER_RSA_FILE #Creating SSH tunnel with secure RSA encryption file.
	sudo mount -t nfs -o port=3049 localhost:../../ $LOCATION_SSHFS_MOUNTPOINT #this may not work correctly on some systems. The error could be: NFS protocol is not supported. Please contact me: koenvdkruk@gmail.com to get a answer.
	echo "Finished connecting to mCLoud server"

}


assignUser() {
	echo "This script will run a remote script on the central peer server"
	echo "Name of the repo"
	read REPO_NAME #ask for the repository name of the newly created group with people working together.

	echo "Users, seperated by ; without spaces"
	read USERS #ask for a list of users in the group.

	ssh $USER@$CENTRAL_IP -o IdentityFile=$USER_RSA_FILE -p 22 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "sudo /usr/bin/mcloud-user-addition $REPO_NAME $USERS" #passing the arguments to the server to create the group.

	echo "Reconnect client and Server using the default commands" #reconnecting the client and server.
	disconnectClientServer
	connectClientServer



}


assignServer() {
	echo "Assigning this client to a mCloud server"

	echo "Generating ssh key"
	ssh-keygen -t rsa

	echo "Now email the public ssh key to the central server"

	echo "Getting contents of ssh key... ~/.ssh/id_rsa.pub"
	echo "YOUR SSH KEY: "
	cat ~/.ssh/id_rsa.pub
	echo "What is the central server ip? (e.g. 95.234.12.65) (ask your central administrator): "
	read CE_IP
	sudo sh -c "echo \"USER=\"$USER\"\" >> $CONFIG_FILE_NAME"  #writing username to config file
	sudo sh -c "echo \"USER_RSA_FILE=\"/home/$USER/.ssh/id_rsa\"\" >> $CONFIG_FILE_NAME" #writing rsa location to config file.
	sudo sh -c "echo \"CENTRAL_IP=\"$CE_IP\"\" >> $CONFIG_FILE_NAME" #writing central ip specified by the user to the config file.


}

#########################
# OPENING MCLOUD IMAGE  #
#########################
openEncryptedContainer() {
	echo "Opening and mounting the already created mCloud instance.."

	echo "Opening the image file: $IMAGE_FILE..."
	sudo cryptsetup luksOpen $IMAGE_FILE $LOCAL_FILE_CONTAINER --key-file $KEY_FILE #opening the image container with the specified key file.
	echo "Mounting encrypted container..."
	sudo mount -o acl /dev/mapper/$LOCAL_FILE_CONTAINER $LOCATION_MOUNTPOINT #mounting the container with  ACL permission
	echo "Mountpoint is attached"
}


#########################
# CLOSING MCLOUD IMAGE  #
#########################
closeEncryptedContainer() {

	echo "Closing the already mounted mCloud image."
	echo "Umounting mountpoint: $LOCATION_MOUNTPOINT"
	sudo umount $LOCATION_MOUNTPOINT #umounting mountpoint/
	echo "Closing encrypted luksvolume"
	sudo cryptsetup luksClose $LOCAL_FILE_CONTAINER #closing encrypted container.
	echo "Mountpoint is closed"
}

#########################
# The command line help #
#########################
display_help() {
    echo "Warning: RUN THIS SCRIPT ONLY ON A PEER FOR MCLOUD"
    echo "This will run a few scripts for mCloud and this script will also ask some information before installing every component"
    echo ""
    echo "Usage: $0 [option...] { connectClientServer | disconnectClientServer | assignServer | openEncryptedContainer | closeEncryptedContainer | assignUser }" >&2
    echo ""
    echo "   -c, --configuration           (TODO)Path to configuration file, default file is: /etc/mcloud-config/mcloud-client.conf"
    echo "   -h, --help                    Display this help message"
    echo ""
    exit 1
}

################################
# Check if parameters options  #
# are given on the commandline #
################################
while :
do
    case "$1" in
      -c | --configuration)
 	  			echo "Adding config file" #todo, specify other config file.
	  			shift 2
          ;;
      -h | --help)
          display_help  # Call your function
          exit 0
          ;;
      --) # End of all options
          shift 2
          break
          ;;
      -*)
          echo "Error: Unknown option: $1" >&2
          ## or call function display_help
          exit 1
          ;;
      *)  # No more options
          break
          ;;
    esac
done

######################
# Check if parameter #
# is set too execute #
######################
case "$1" in
  assignServer)
    assignServer
    ;;
  assignUser)
    assignUser
    ;;
  connectClientServer)
    connectClientServer
    ;;
  disconnectClientServer)
    disconnectClientServer
    ;;
  openEncryptedContainer)
    openEncryptedContainer ##added
    ;;
  closeEncryptedContainer)
    closeEncryptedContainer  ##added
    ;;
  *)


     display_help
     exit 1
    ;;
esac

echo "Finishing"
